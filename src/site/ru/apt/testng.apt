 ----
 Тестирование в Java. TestNG.
 ----
 sody
 ----
 2011-05-17

Тестирование в Java. TestNG.

  Наверняка все знакомы с таким понятием как test-driven development(TDD). Наряду с ним также существует такое понятие,
  как data-driven testing(DDT, не в обиду Шевчуку) - техника написания тестов, при которой данные для тестов хранятся отдельно
  от самих тестов. Они могут храниться в базе данных, файле, генерироваться во время исполнения теста. Это учень удобно,
  так как один и тот же функционал тестуруется на различных наборах данных, при этом добавление, удаление или изменение
  этих данных максимально упрощено.

  В предыдущей статье я рассмотрел возможности JUnit-а. Там примерами такого рода подхода могут служить запускалки
  <<<Parameterized>>> и <<<Theories>>>, в обоих случаях один тест-класс может содержать только один такой параметризированный
  тест(в случае <<<Parameterized>>> несколько, но все они будут использовать одни и те же данные).

  В этой статье я заострю внимание на тестовом фреймворке TestNG. Многие уже слышали это название, и перейдя на него,
  вряд ли желают вернуться к JUnit-у(хотя это только предположение).

* Основные возможности

  Итак, что же здесь есть? Как и в JUnit 4 тесты описываются с помощью аннотаций, также поддерживаются тесты написанные на
  JUnit 3. Есть возможность вместо аннотаций использовать доклет, это может быть полезно если использовать Java 1.4.

  Для начала рассмотрим иерархию тестов. Прежде всего хочу сказать что здесь тесты принадлежат к какой-либо последовательности
  тестов(сюите), включают в себя некоторое количество классов, каждый из которых может состоять из нескольких тестовых методов.
  При этом классы и тестовые методы могут принадлежать к определенной группе. Наглядно это выглядит так:

----
+- suite/
   +- test0/
   |  +- class0/
   |  |  +- method0(integration group)/
   |  |  +- method1(functional group)/
   |  |  +- method2/
   |  +- class1
   |     +- method3(optional group)/
   +- test1/
      +- class3(integration group)/
         +- method4/
----

  Для запуска тестов используется XML либо YAML конфигурация(можно и без них, например в мавене): XML выглядит примерно так:

+----+
<suite name="SingleSuite" verbose="2" thread-count="4">

  <parameter name="n" value="42" />

  <test name="Regression2">
    <groups>
      <run>
        <exclude name="broken" />
      </run>
    </groups>

    <classes>
      <class name="test.listeners.ResultEndMillisTest" />
    </classes>
  </test>
</suite>
+----+

  Аналогичная YAML конфигурация:

+----+
name: SingleSuite
threadCount: 4
parameters: { n: 42 }

tests:
  - name: Regression2
    parameters: { count: 10 }
    excludedGroups: [ broken ]
    classes:
      - test.listeners.ResultEndMillisTest
+----+

  Теперь поподробнее о самих тестах. Рассмотрим пример:

+----+
+----+

  Все объявления с помощью аннотаций(либо джавадоков):

  * <<<BeforeSuite>>> обозначает методы, которые будут вызваны до исполнения всех тестов, методы должны быть <<<public void>>>.
  Здесь обычно размещаются предустановки для теста, в нашем случае это генерация тестовых данных


* Литература

  * {{{http://tctutorial.ru/datadriven/}Data Driven Testing (Тесты, управляемые данными)}}

  * {{{http://testng.org/doc/index.html}TestNG}}